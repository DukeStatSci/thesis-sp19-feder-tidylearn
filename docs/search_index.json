[
["index.html", "My Final College Paper Introduction", " My Final College Paper Benjamin Feder May 20xx Introduction Welcome to the R Markdown thesis template. This template is based on (and in many places copied directly from) the Reed College LaTeX template, but hopefully it will provide a nicer interface for those that have never used TeX or LaTeX before. Using R Markdown will also allow you to easily keep track of your analyses in R chunks of code, with the resulting plots and output included as well. The hope is this R Markdown template gets you in the habit of doing reproducible research, which benefits you long-term as a researcher, but also will greatly help anyone that is trying to reproduce or build onto your results down the road. Hopefully, you won’t have much of a learning period to go through and you will reap the benefits of a nicely formatted thesis. The use of LaTeX in combination with Markdown is more consistent than the output of a word processor, much less prone to corruption or crashing, and the resulting file is smaller than a Word file. While you may have never had problems using Word in the past, your thesis is likely going to be about twice as large and complex as anything you’ve written before, taxing Word’s capabilities. After working with Markdown and R together for a few weeks, we are confident this will be your reporting style of choice going forward. Why use it? R Markdown creates a simple and straightforward way to interface with the beauty of LaTeX. Packages have been written in R to work directly with LaTeX to produce nicely formatting tables and paragraphs. In addition to creating a user friendly interface to LaTeX, R Markdown also allows you to read in your data, to analyze it and to visualize it using R functions, and also to provide the documentation and commentary on the results of your project. Further, it allows for R results to be passed inline to the commentary of your results. You’ll see more on this later. Having your code and commentary all together in one place has a plethora of benefits! Who should use it? Anyone who needs to use data analysis, math, tables, a lot of figures, complex cross-references, or who just cares about the final appearance of their document should use R Markdown. Of particular use should be anyone in the sciences, but the user-friendly nature of Markdown and its ability to keep track of and easily include figures, automatically generate a table of contents, index, references, table of figures, etc. should make it of great benefit to nearly anyone writing a thesis project. "],
["1-introduction-1.html", "Chapter 1 Introduction", " Chapter 1 Introduction At Duke University, STA 101 is the primary introductory statistics course, where students are assumed to have entered the class without any statistical knowledge. The majority of the students enrolled in the course do not plan to pursue a future statistical education, which lends the course to one centered around the learning of statistical applications, where students are taught how to relate the concepts covered in STA 101 to their future works. At the beginning, the students are split into groups where they complete assignments throughout the course together. The class is split into seven units, and every section has at least one lab, taught in R, to bolster the learning segment. To conclude the semester, students display their grasp of the course through a project conducted in R with their student group. The project, while constrained to a specific dataset, is relatively open-ended, as the groups can analyze various features of the data. Due to the nature of flexibility promoted by this project, students are encouraged to display aspects of creativity in their analyses, whether it is focusing on solely movies produced by Warner Bros. Entertainment Inc., or producing a new variable tracking if a movie received a nomination for best director, best actor or best actress. Creativity often stems from the exploratory data analysis process, where groups can find anomalies and/or interesting aspects that they can choose to further analyze as they progress to the analysis required in the project. The importance of utilizing programming languages in introductory statistics courses is due to the inherent nature of the class. Since the majority of students will apply the concepts covered in the course in their future work, an effective tool is using a programming tool. The most popular one in the scope of statistics in R, which has become widely used in the field. When using R as a supplement to the course, there are two prevailing, and competing, techniques. Either students can be instructed to work with a relatively new suite of packages called the Tidyverse, or to use Base R commands that have been in use for far longer. The Tidyverse was created to make coding in R simpler, but with that comes less of an internet community due to its relatively young age. At the University, STA 101 classes have been taught distinctly using one or the other, which creates an optimal platform for analyzing the differences in using these syntaxes. Does one coding technique encourage a certain level of creativity not inforced by the other? That is the question this study seeks to discover through the analysis of these group projects, which are available using both base R and Tidyverse methods. Creativity can be measured by marking certain aspects of the exploratory data analysis process, such as tracking the mutation and creation of new variables, subsetting the dataset, and analyzing specific groups within the data. We begin by checking to ensure that needed packages are installed and then we load them into our current working environment: # List of packages required for this analysis pkg &lt;- c(&quot;dplyr&quot;, &quot;ggplot2&quot;, &quot;knitr&quot;, &quot;bookdown&quot;, &quot;devtools&quot;) # Check if packages are not installed and assign the # names of the packages not installed to the variable new.pkg new.pkg &lt;- pkg[!(pkg %in% installed.packages())] # If there are any packages in the list that aren&#39;t installed, # install them if (length(new.pkg)) install.packages(new.pkg, repos = &quot;http://cran.rstudio.com&quot;) # Load packages (thesisdowndss will load all of the packages as well) library(thesisdowndss) "],
["2-literature-review-notes.html", "Chapter 2 Literature Review Notes:", " Chapter 2 Literature Review Notes: Source: http://varianceexplained.org/r/teach-tidyverse/ -Tidyverse allows students to make visualizations and do stuff with data from the get go (high-level analysis), rather than focusing on learning R syntax from the start -Have been able to teach pretty basic code using ~facet_wrap in 2-3 hours to people who have never used coding before -Syntax is flexible for other work in the future from the start -However, doesn’t teach conditionals and loops from the start -Loops are extremely inefficient for the most part and are advanced generally to make them more efficient -There’s only one way to do most tidyverse commands, like manipulating data frames, which makes this consistent -Will eventually have to learn important base R stuff, but can use them in combination with tidyverse tools, so you can sprinkle them in -ex. lm(), mean()—allows you to apply these functions immediately once they understand tidyverse syntax -Goal of introductory stats course coding: R is worth learning, can bolster statistical analysis -Want to get people started doing stuff in R from the start to draw them in and also as supplementary material for intro stats From comments: One issue—not as much help online for Tidyverse, students end up with a mix sometimes when looking up issues they run into Source: http://varianceexplained.org/r/teach_ggplot2_to_beginners/ -ggplot2 should be taught first before base R, despite being a third-party package -To make the same equivalent plots in base R that you can with ggplot(), you need to know how to generally run for() loops and add more lines such as legend() to make the plots readable -ggplot2 plots are also better looking -The goal with coding in introductory statistics courses is to convince students that they want to learn coding, and giving them the tools to make cool plots from the start will help them get excited -”ggplot2 aims for abstraction, where the choices the you make are the ones that matter for your visualization of the data” -tidy data is required, but it’s good practice since other general functions such as lm() require tidy data anyways Source: The mosiac package: Helping Students to ‘Think with Data’ Using R -Goal: The mosiac package should be easy to implement for beginning coders, allowing them to make insights without an extensive coding background -”Less volume, more creativity” -mosaic seeks to support the belief of the importance of learning how to work in a multivariate environment -uses the same template for numerical, categorical and graphical summaries -recommends plotting in two variable settings first, because you might not be able to do in base R + more interesting with two variables as opposed to just one -mplot() incorporates an argument to use ggplot2 graphics instead of Base R, also can create interactive plots in ggplot2 -mosaic also has specific functions geared toward introductory students, such as rflip(), helping explain binomial situations without for() loops -mosaic depends on ggplot2 and dplyr, dplyr is encouraged to use alongside mosaic since it also emphasizes the “less volume, more creativity” approach -”One of the keys to successfully empowering students to think with data is providing them both a conceptual framework that allows them to know what to look for and how to interpret what they find, and a computational toolbox that allows them to do the looking” -allows students to use programming as an asset from the start of their statistical learning -students should also learn the errors that R gives out early on so they can diagnose their own code issues, decrease anxiety and frustration and lower expectations for perfect code Source: infrastructure and tools for teaching statistical computing throughout the statistical curriculum -Goal: To provide guidelines for statistical programming tools for introductory statistics classes since as time progresses, programming has emerged as a requirement for statistics, especially when dealing with the practical and relevant datasets of today. -Programming is necessary for people pursuing stats, so it’s a matter of how and when to teach these skills -Students need to be exposed early on, but in a supplemental fashion so they can still grasp the already dense concepts already regularly covered in the classrooms -In the author’s computation classes, there’s a goal to computationally visualize something within the first 10 minutes of the first day -Rstudio is best because it is most practical if students choose to advance, and also isn’t intimidating to write a line or two of code as opposed to screencast instructions of point-and-click software -R enhances problem solving skills in relation to statistics early on -Rstudio as opposed to R may help ease the learning curve by being an IDE -Emphasis on reproducibility in code -Make computing a central part of the statistics course and not just an auxillary one -Doing so makes it easier to not waste time in advanced stats courses explaining how to do preliminary coding because that’s the students’ introduction to it Source: Tidy Data by Hadley Wickham Goal: Will talk about how to best work with tidy data, where each row is an observation, each column is a variable and each observational unit is a table. There are a few techniques that apply to a variety of messy datasets to make them tidy, and a lot of functions that rely on tidy data inputs and outputs to work, so it’s a good practice to use. -not a lot of research on data preparation although it’s the most time-consuming part of the process -data tidying: structuring datasets to facilitate analysis -data structure is always set with tidy data, don’t need to work out kinks of other issues in manual-induced ones -tidy datasets work symmetrically with tidy tools -don’t need to work on data logistics, but can go right to the problem -tidy data framework based on Hadley’s experience with real-world problems and datasets and then teaching students those skills -generally, measured variables are listed after fixed ones, and related ones are next to each other by column -rows are ordered by the first variable -tidy tools: “tools that take tidy datasets as input and return tidy datasets as output. Tidy tools are useful because the output of one tool can be used as the input to another.” -most data transformation operations are made easier by having each variable as a column "],
["3-data-background.html", "Chapter 3 Data Background", " Chapter 3 Data Background The dataset is manually compiled from STA 101 final projects since 2013. The provided data for the projects has been constant throughout this analysis, and it tracks a random sample of American movies released since 1970. The provided datset contains variables regarding the movie’s general characteristics, such as runtime, genre, and production studio, award trackers, as well as audience and critic ratings from Rotten Tomatoes and statistics from its IMDB page. These projects have five components—an introduction, univariate analysis, bivariate analysis, multiple regression in predicting audience scores, and a conclusion. The regression section is relatively constant amongst groups in determining an optimal regression. However, in the univariate and bivariate analyses, student groups can explore a variety of different options, often differentiating between the relative strengths of the projects. An example of a complete project assignment is available in the Appendix. The dataset utilized in this paper primarily focuses on actions taken by groups within the univariate and bivariate portions of the projects. In doing so, the dataset contains variables aimed at summarizing relative creativity measures, as well as grade performance and completeness of the assignments. Explanations of specific variables will be available in the following section. Note: I have not gone back through and separated the column that used to be subsetting the data. That column has been changed to one tracking a subgroup analysis, and the other as using a subset of the data for the entire project. In the meantime, I have set the NAs for the subgroup analysis to 0 for the purpose of analyzing the creative variable. "],
["4-analysis.html", "Chapter 4 Analysis 4.1 Exploratory Data Analysis", " Chapter 4 Analysis 4.1 Exploratory Data Analysis As of now, the groups have an unequal amount of observations because I have gone through more Base R projects. Just to note, the following data conclusions may change with time. tidyverse n base R 42 tidyverse 30 Note: Currently, the creativity variable is a sum of the four different components: creating new variables, mutating existing ones, performing a subgroup analysis and subsetting the data set. 4.1.1 Creativity The creativity score is simply a sum of four different components of projects: creating new variables, mutating existing ones, performing a subgroup analysis, and subsetting the data set. In terms of total creativity, there is generally a higher proportion of more creativity points for Tidyverse projects. tidyverse creative n prop base R 0 13 31.0% base R 1 17 40.5% base R 2 10 23.8% base R 3 1 2.4% base R NA 1 2.4% tidyverse 0 7 23.3% tidyverse 1 13 43.3% tidyverse 2 10 33.3% The differences in creativity scores can be elucidated through analyses into each of the four separate variables combining to form the creativity metrics. Perhaps the most distinct difference occurs in the creation of new variables, which is defined as any data manipulation throughout the EDA process where a previously non-existing variable is formed. As an example, one project created a new variable tracking if a movie had won any of the following awards: best picture, best actor, bestactress, or best director, and that project had this variable coded as “yes.” tidyverse create_new_var n proportion base R yes 9 21.4% tidyverse yes 8 26.7% As shown above, it is clear that the proportion of projects with the creation of new variables is higher in Tidyverse ones. This may be because it is very easy to create new variables using mutate() in the Tidyverse. However, one covariate in particular, mutating existing variables, did not seem to vary frequency-wise across different syntax users. Within the movies dataset, an example from some projects was to ignore G-rated movies from the dataset. In fact, it seems as though slightly more base R studies changed pre-existing variables. tidyverse change_var n prop base R yes 6 14.3% tidyverse yes 4 13.3% The mechanisms for doing so are not much more complicated in base R. An example of changing an existing studio variable to “Warner Bros. Studios” or “Other” is listed below in both Base R and the Tidyverse for comparison: Tidyverse: movies &lt;- movies %&gt;% mutate(studio = (if_else(studio == &quot;Warner Bros. Pictures&quot;, &quot;Warner Bros. Pictures&quot;, &quot;Other&quot;)) Base R: movies$studio &lt;- if_else(movies$studio == &quot;Warner Bros. Pictures&quot;, &quot;Warner Bros. Pictures&quot;, &quot;Other&quot;) The other two variables need to be re-inputted and updated, so the language and subsections remain below to avoid confusion. 4.1.2 Subgroup Analysis The presence of a form of a subgroup analysis was measured in regards to creativity. To score a 1 for this variable, projects analyzed a portion of the data for parts of their EDA. As an example, a project receiving a “yes” for this category may have analyzed how the audience ratings for R rated movies compared to that of PG-13 movies in their bivariate analysis. This variable has not been recoded yet. tidyverse sub_analysis n prop base R yes 1 2.4% 4.1.3 Subsetting dataset The final variable included in the creativity metric was the usage of a subset of the data for the entire analysis, such as analyzing solely PG movies for the scope of the analysis. This variable has also not been recoded yet fully, but it appears as though Tidyverse projects have a signficantly higher proportion. tidyverse sub_data n prop base R yes 24 57.1% tidyverse yes 21 70.0% 4.1.4 Overall theme As for a rough comparison of project quality, a new variable devised of a summation of a theme throughout the exploratory data analysis and the use of relevant and sufficient supporting data. (Could be facilitated by the tidyverse?) By the use of relevant and sufficient supporting data, the covariate seeks to address the issue that projects may have interesting themes but lack the analysis and coding quality to supplement their project. Thus, a category tracking relevant data, such as finding the correlation in a linear regression instead of merely plotting the two variables together, was created. Thus far, it appears as though a higher proportion of Tidyverse projects reach a certain quality. This may be due to the ease in using the Tidyverse suit of commands in a fashion that make the project easier to code as beginners in R. tidyverse theme n prop base R 0 6 14.3% base R 1 20 47.6% base R 2 15 35.7% base R NA 1 2.4% tidyverse 0 5 16.7% tidyverse 1 9 30.0% tidyverse 2 16 53.3% Both variables within theme reflect this trend. A present theme throughout EDA is present in a greater proportion of Tidyverse projects. As an example, analyzing the impact of movie ratings on audience scores would be a sufficient theme, but referencing an assortment of different predictors would not register as one. tidyverse eda_theme n prop base R yes 25 59.5% tidyverse yes 21 70.0% The significant difference in couhts could be attributed to the select() function in the Tidyverse. Tidyverse projects also had a substantially higher margin of projects with relevant supplmenetary data analyses. tidyverse rel_data n prop base R yes 25 59.5% tidyverse yes 20 66.7% 4.1.5 Grades NOT IMPORTANT RIGHT NOW Not important: When analyzing the difference in grade distributions between Tidyverse and Base R courses, the Base R ones are not significantly higher. Upon a closer look at individual semesters, though, it is clear that the Fall 2013 grade distribution is significantly higher than any of the others, and thus, it makes sense to scale the grade variable by semester. tidyverse mean(grade, na.rm = TRUE) sd(grade, na.rm = TRUE) base R 86.88780 4.241473 tidyverse 86.06667 4.425111 Warning: Removed 1 rows containing non-finite values (stat_boxplot). sem mean(grade, na.rm = TRUE) sd(grade, na.rm = TRUE) Fall 2013 89.95833 1.997480 Fall 2014 85.61724 4.291859 Fall 2015- Section 06 86.06667 4.425111 Warning: Removed 1 rows containing non-finite values (stat_boxplot). "],
["conclusion.html", "Conclusion", " Conclusion If we don’t want Conclusion to have a chapter number next to it, we can add the {-} attribute. More info And here’s some other random info: the first paragraph after a chapter title or section head shouldn’t be indented, because indents are to tell the reader that you’re starting a new paragraph. Since that’s obvious after a chapter or section title, proper typesetting doesn’t add an indent there. If you feel it necessary to include an appendix, it goes here. --> "],
["A-the-first-appendix.html", "A The First Appendix", " A The First Appendix This first appendix includes all of the R chunks of code that were hidden throughout the document (using the include = FALSE chunk tag) to help with readibility and/or setup. In the main Rmd file # This chunk ensures that the thesisdowndss package is # installed and loaded. This thesisdowndss package includes # the template files for the thesis. if(!require(devtools)) install.packages(&quot;devtools&quot;, repos = &quot;http://cran.rstudio.com&quot;) if(!require(thesisdowndss)) devtools::install_github(&quot;mine-cetinkaya-rundel/thesisdowndss&quot;) library(thesisdowndss) In Chapter ??: "],
["B-the-second-appendix-for-fun.html", "B The Second Appendix, for Fun", " B The Second Appendix, for Fun "],
["references.html", "References", " References "]
]
